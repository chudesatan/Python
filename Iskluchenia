#!/usr/bin/env python
# -*- coding: utf-8 -*-

#Exersize 1
import re
import unittest

OPERATORS = {
    '+': float.__add__, 
    '-': float.__sub__,
    '*': float.__mul__,
    '/': float.__div__,
    '%': float.__mod__,
    '^': float.__pow__,
}

class FindError(Exception):

    def __init__(self, message):
        self._message = u"Ошибка %s" % message
        
    def _get_message(self):
        return self._message
    message = property(_get_message)

def reversed_polish_notation(expr):

    ops = OPERATORS.keys()
    stack = [] 

    for atom in re.split(r"\s+", expr):
        try:
            atom = float(atom)
            stack.append(atom)
        except ValueError:
            for oper in atom:
                if oper not in ops: 
                    continue
                try:
                    oper2 = stack.pop()
                    oper1 = stack.pop()
                except IndexError:
                    raise RPNError(u"Не хватает операндов")
                try:
                    oper = OPERATORS[oper](oper1, oper2)
                except ZeroDivisionError:
                    raise RPNError(u"Нельзя делить на 0")

                stack.append(oper)

    if len(stack) != 1:
        raise RPNError(u"Избыток операндов")

    return stack.pop()

if __name__ == "__main__":
    unittest.main()
